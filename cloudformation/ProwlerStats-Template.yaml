# Copyright 2023 - Chris Farris - All Rights Reserved
#

AWSTemplateFormatVersion: '2010-09-09'
Description: Run Prowler across the entire org, and index findings in Elastic Search
Transform: AWS::Serverless-2016-10-31


Parameters:

  pOpenSearchAdminPassword:
    Description: Initial Password for the OpenSearch Dashboard
    Type: String
    NoEcho: true

  pBucketName:
    Description: Name of the bucket to hold the results
    Type: String

  pAuditRoleName:
    Description: Default name of the AssumeRole to assume into accounts
    Type: String
    Default: security-audit

  pPayerAccountId:
    Description: Account ID of the AWS Organizations Management Account
    Type: String

  pTemplateURL:
    Description: URL to the Transformed Template this stack was deployed with (for promotion to another environment)
    Type: String

  # pExecutionRate:
  #   Description: How frequently the StepFunction should Run (As a CloudWatch ScheduleExpression)
  #   Type: String
  #   Default: rate(1 day)

  # pRuleState:
  #   Type: String
  #   Description: Enable to disable the CloudWatch Event to fire the Stepfunction
  #   Default: DISABLED
  #   AllowedValues:
  #     - DISABLED
  #     - ENABLED

  # pEventJson:
  #   Description: JSON Event sent to the Master StepFunction
  #   Type: String

  #
  # Fargate Related Params
  #
  pDeployFargate:
    Description: Deploy Container into Fargate or not
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  pServiceName:
    Type: String
    Default: "prowler"
    Description: A name for the service

  pContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to

  pContainerCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container. 1024 is 1 CPU

  pContainerMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the container

  pImageRepo:
    Type: String
    Description: The url of a docker image that contains the application process that will handle the traffic for this service

  pImageVersion:
    Description: Version Identifer of Container to Deploy
    Type: String

  pContainerSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet to use for the Fargate containers

  #
  # ElasticSearch Related Params
  #
  pDomainName:
    Description: Name of the Elasticsearch Domain
    Type: String
    MaxLength: 28

  pClusterInstanceType:
    Type: String
    Description: Size of the ES Cluster
    Default: t2.small.elasticsearch
    ConstraintDescription: Must be a valid Elasticsearch Service InstanceType (https://aws.amazon.com/elasticsearch-service/pricing/)

  pClusterInstanceCount:
    Type: Number
    Description: Cluster Instance Count
    Default: 1

  pClusterEncryption:
    Type: String
    Description: Enable Encryption for the Elasticsearch Cluster
    Default: False
    AllowedValues:
      - True
      - False

  pEngineVersion:
    Type: String
    Description: What version of OpenSearch you want to use
    Default: "OpenSearch_2.5"


Globals:
  Function:
    Runtime: python3.9
    MemorySize: 2048
    Timeout: 300
    Environment:
      Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          BUCKET: !Ref pBucketName
          ROLE_NAME: !Ref pAuditRoleName
          LOG_LEVEL: 'INFO'


Conditions:
  cDeployFargateContainer: !Equals [ !Ref pDeployFargate, 'true' ]
  EncryptionEnabled: !Equals [ !Ref pClusterEncryption, True ]

Resources:

  #
  # Results Bucket
  #
  ProwlerBucket:
    Type: AWS::S3::Bucket
    # DeletionPolicy: Retain
    DependsOn: ProwlerBucketNotificationTopicPolicy
    Properties:
      # AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref pBucketName
      # Additional Configuration options to come back and revisit.
      # LifecycleConfiguration: <- I don't think we'd ever want to expire resources, but maybe over time?
      # LoggingConfiguration: <- Probably unnecessary, but if someone needs it for compliance
      # MetricsConfigurations: <- Might be useful to see metrics on the primary keys of the bucket
      # InventoryConfiguration: <- Might be useful to pull out the Resources/ objects into a specific report
      NotificationConfiguration:
        TopicConfigurations:
          - Event: 's3:ObjectCreated:*'
            Topic: !Ref OutputNotificationTopic
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: "prowler-output/json/"
                  - Name: suffix
                    Value: ".json"
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True  # This rule also prohibits Cross-Account bucket access

  OutputNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Destination of PutObject calls from ${pBucketName}"
      TopicName: !Sub "${pBucketName}-Resources-PutObject"

  # This Policy can be reused for any future Topics
  ProwlerBucketNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref OutputNotificationTopic
      PolicyDocument:
        Version: '2012-10-17'
        Id: AllowProwlerBucket
        Statement:
        - Sid: AllowProwlerBucketPublish
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Publish
          Resource:
          - !Ref OutputNotificationTopic
          Condition:
            ArnLike:
              aws:SourceArn: !Sub "arn:aws:s3:*:*:${pBucketName}"
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId

  #
  # ECS Resources
  #
  ECSCluster:
    Type: AWS::ECS::Cluster
    Condition: cDeployFargateContainer

  ProwlerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Condition: cDeployFargateContainer
    Properties:
      Family: !Ref 'pServiceName'
      Cpu: !Ref 'pContainerCpu'
      Memory: !Ref 'pContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ContainerRole
      RuntimePlatform:
          CpuArchitecture: ARM64
          OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: !Ref 'pServiceName'
          Cpu: !Ref 'pContainerCpu'
          Memory: !Ref 'pContainerMemory'
          Image: !Sub "${pImageRepo}:${pImageVersion}"
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Sub ${pServiceName}
                awslogs-region: !Ref AWS::Region
                awslogs-create-group: true
                awslogs-stream-prefix: !Sub "${pServiceName}-${pImageVersion}"
          Environment:
            - Name: ROLENAME
              Value: !Ref pAuditRoleName
            - Name: PAYER_ID
              Value: !Ref pPayerAccountId
            - Name: OUTPUT_BUCKET
              Value: !Ref pBucketName
          # PortMappings:
          #   - ContainerPort: !Ref 'pContainerPort'

  ContainerRole:
    Type: AWS::IAM::Role
    Condition: cDeployFargateContainer
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs.amazonaws.com
              - ecs-tasks.amazonaws.com
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
              # Allow the ECS tasks to upload logs to CloudWatch
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
            Resource: '*'
      - PolicyName: ProwlerPermissions
        PolicyDocument:
          Statement:
          - Sid: WriteResultsToS3
            Action: s3:*
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${pBucketName}/*'
              - !Sub 'arn:aws:s3:::${pBucketName}'
          - Sid: AssumeAuditRole
            Effect: "Allow"
            Action:
            - sts:AssumeRole
            Resource: !Sub "arn:aws:iam::*:role/${pAuditRoleName}"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Condition: cDeployFargateContainer
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:CreateLogGroup'
                - 'logs:PutLogEvents'
              Resource: '*'

  #
  # OpenSearchService Cluster
  #
  ProwlerESDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: admin
          MasterUserPassword: !Ref pOpenSearchAdminPassword
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${pDomainName}/*"
      DomainName: !Ref pDomainName
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 20
        VolumeType: "gp2"
      ClusterConfig:
        # FIXME
        DedicatedMasterEnabled: false
        InstanceCount: !Ref pClusterInstanceCount
        ZoneAwarenessEnabled: false
        InstanceType: !Ref pClusterInstanceType
      EngineVersion: !Ref pEngineVersion
      # Encryption at rest is not supported with t2.small.elasticsearch
      EncryptionAtRestOptions:
        Enabled: !Ref pClusterEncryption
        KmsKeyId:
          Fn::If:
          - EncryptionEnabled
          - Ref: SearchClusterKMSKey
          - Ref: AWS::NoValue
      NodeToNodeEncryptionOptions:
        Enabled: !Ref pClusterEncryption
      LogPublishingOptions:
        ES_APPLICATION_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt ApplicationLogGroup.Arn
          Enabled: true
        SEARCH_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt SearchSlowLogGroup.Arn
          Enabled: true
        INDEX_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt IndexSlowLogGroup.Arn
          Enabled: true
        AUDIT_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt AuditLogGroup.Arn
          Enabled: true
      SnapshotOptions:
        AutomatedSnapshotStartHour: "0"
      DomainEndpointOptions:
        EnforceHTTPS: True
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07

  SearchClusterKMSKey:
    Type: AWS::KMS::Key
    # Condition: EncryptionEnabled
    Properties:
      Description: !Sub KMS Key in ${AWS::StackName}
      Enabled: True
      EnableKeyRotation: False
      KeyPolicy:
        Version: "2012-10-17"
        Id: "allow-iam"
        Statement:
          - Sid: "Allow everyone use of the key"
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: "Allow s3 use of the key"
            Effect: "Allow"
            Principal:
              Service:
                - "s3.amazonaws.com"
                - "sqs.amazonaws.com"
                - "lambda.amazonaws.com"
                - !Sub "logs.${AWS::Region}.amazonaws.com"
                # Added per https://aws.amazon.com/premiumsupport/knowledge-center/sns-topic-sqs-queue-sse-cmk-policy/ to support the S3 Event->SNS->SQS workflow
                - "sns.amazonaws.com"
            Action:
              - "kms:GenerateDataKey*"
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:Describe*"
            Resource: "*"

  SearchClusterKMSKeyAlias:
    Type: AWS::KMS::Alias
    # Condition: EncryptionEnabled
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-kmskey"
      TargetKeyId: !Ref SearchClusterKMSKey

  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !If
        - EncryptionEnabled
        - !GetAtt SearchClusterKMSKey.Arn
        - !Ref AWS::NoValue
      LogGroupName: !Sub ${AWS::StackName}-opensearch-application-logs
      RetentionInDays: 180

  AuditLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !If
        - EncryptionEnabled
        - !GetAtt SearchClusterKMSKey.Arn
        - !Ref AWS::NoValue
      LogGroupName: !Sub ${AWS::StackName}-opensearch-audit-logs
      RetentionInDays: 180

  SearchSlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !If
        - EncryptionEnabled
        - !GetAtt SearchClusterKMSKey.Arn
        - !Ref AWS::NoValue
      LogGroupName: !Sub ${AWS::StackName}-opensearch-slow-logs
      RetentionInDays: 180

  IndexSlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !If
        - EncryptionEnabled
        - !GetAtt SearchClusterKMSKey.Arn
        - !Ref AWS::NoValue
      LogGroupName: !Sub ${AWS::StackName}-opensearch-index-slow-logs
      RetentionInDays: 180

  OpenSearchLogPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: "OpenSearchPolicy"
      PolicyDocument: !Sub >
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "es.amazonaws.com"
              },
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream"
              ],
              "Resource": [
                "${ApplicationLogGroup.Arn}",
                "${SearchSlowLogGroup.Arn}",
                "${IndexSlowLogGroup.Arn}",
                "${AuditLogGroup.Arn}"
              ]
            }
          ]
        }

  ESSnapshotRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${pBucketName}/*"
              - !Sub "arn:aws:s3:::${pBucketName}"
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'


  #
  # Lambda Functions
  #
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${pBucketName}/*'
              - !Sub 'arn:aws:s3:::${pBucketName}'
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: AssumeCrossAccountRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - sts:AssumeRole
            Resource: !Sub "arn:aws:iam::*:role/${pAuditRoleName}"
      - PolicyName: GetMessages
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource:
            - !GetAtt S3EventQueue.Arn
            - !GetAtt FindingIngestEventQueue.Arn
            Action:
            - sqs:*
            Effect: Allow
      - PolicyName: IndexData
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: !Sub "${ProwlerESDomain.DomainArn}/*"
            Action:
            - es:*
            Effect: Allow
      - PolicyName: KMSDecrypt
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource:
            - !If
              - EncryptionEnabled
              - !GetAtt SearchClusterKMSKey.Arn
              - !Sub "arn:aws:kms:us-east-1:${AWS::AccountId}:key/thiskeydoesntexist"
            Action:
            - kms:GenerateDataKey*
            - kms:Decrypt
            Effect: Allow

  ImportProwlerFindingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-import-findings"
      Description: Import Prowler Findings into ElasticSearch
      Handler: import_findings.handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../lambda
      # TODO - Set Concurrency here
      Events:
        SQSIngest:
          Type: SQS
          Properties:
            BatchSize: 100
            MaximumBatchingWindowInSeconds: 60
            Enabled: True
            Queue: !GetAtt FindingIngestEventQueue.Arn
      Environment:
        Variables:
          ES_DOMAIN_ENDPOINT: !GetAtt ProwlerESDomain.DomainEndpoint

  ProcessFindingsFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-process-finding-file"
      Description: Process the Prowler file pushed to S3
      Handler: process_finding_file.handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../lambda
      Events:
        SQSIngest:
          Type: SQS
          Properties:
            BatchSize: 1
            Enabled: True
            Queue: !GetAtt S3EventQueue.Arn
      Environment:
        Variables:
          FINDING_QUEUE_URL: !Ref FindingIngestEventQueue

  ProcessSecHubFindingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-process-sechub"
      Description: Process Security Hub Findings pushed to EventBus
      Handler: process_sechub.handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../lambda
      Events:
        InspectorEventBridge:
            Type: EventBridgeRule
            Properties:
              # DeadLetterConfig: DeadLetterConfig
              # EventBusName: String
              # Input: String
              # InputPath: String
              # Name: String
              Pattern:
                source:
                  - aws.securityhub
              # RetryPolicy: RetryPolicy
              State: ENABLED
              # Target: Target
      Environment:
        Variables:
          ES_DOMAIN_ENDPOINT: !GetAtt ProwlerESDomain.DomainEndpoint

  #
  # S3 -> SNS -> SQS -> Lambda Plumbing
  #
  S3EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId:
        Fn::If:
          - EncryptionEnabled
          - Ref: SearchClusterKMSKey
          - Ref: AWS::NoValue
      KmsDataKeyReusePeriodSeconds:
        Fn::If:
          - EncryptionEnabled
          - 86400
          - Ref: AWS::NoValue
      # Any messages older than an hour are probably out-of-date
      MessageRetentionPeriod: 36000
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 300

  S3EventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref S3EventQueue
      PolicyDocument:
        Version: '2012-10-17'
        Id: AllowS3
        Statement:
        - Sid: AllowS3EventNotification
          Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - SQS:SendMessage
          Resource: !GetAtt S3EventQueue.Arn
          Condition:
            ArnLike:
              aws:SourceArn: !Sub "arn:aws:s3:*:*:${pBucketName}"
        - Sid: Allow-SNS-SendMessage
          Effect: Allow
          Principal: "*"
          Action:
          - sqs:SendMessage
          Resource: !GetAtt S3EventQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref OutputNotificationTopic

  S3EventQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt S3EventQueue.Arn
      Protocol: sqs
      TopicArn: !Ref OutputNotificationTopic

  S3EventQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      # AlarmActions:
      #   - String
      AlarmDescription: "Alert when Queue doesn't properly drain"
      AlarmName: !Sub "${AWS::StackName}-FileProcessQueue"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt S3EventQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      # OKActions:
      #   - String
      Period: 300
      Statistic: Average
      Threshold: 3
      TreatMissingData: missing


  #
  # Finding Queue
  #
  FindingIngestEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId:
        Fn::If:
          - EncryptionEnabled
          - Ref: SearchClusterKMSKey
          - Ref: AWS::NoValue
      KmsDataKeyReusePeriodSeconds:
        Fn::If:
          - EncryptionEnabled
          - 86400
          - Ref: AWS::NoValue
      # Any messages older than an hour are probably out-of-date
      MessageRetentionPeriod: 36000
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 300

  FindingIngestEventQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      # AlarmActions:
      #   - String
      AlarmDescription: "Alert when Queue doesn't properly drain"
      AlarmName: !Sub "${AWS::StackName}-FindingIngestQueue"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt FindingIngestEventQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      # OKActions:
      #   - String
      Period: 300
      Statistic: Average
      Threshold: 8000
      TreatMissingData: missing


  #
  # Dashboard
  #
  Dashboard:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardName: !Ref AWS::StackName
      DashboardBody: !Sub |-
        {
            "widgets": [
                {
                    "type": "metric",
                    "x": 0,
                    "y": 0,
                    "width": 12,
                    "height": 3,
                    "properties": {
                        "metrics": [
                            [ "AWS/Lambda", "Invocations", "FunctionName", "${AWS::StackName}-import-findings", { "stat": "Sum", "period": 604800 } ],
                            [ ".", "Errors", ".", ".", { "stat": "Sum", "period": 604800 } ],
                            [ ".", "Throttles", ".", ".", { "stat": "Sum", "period": 604800 } ],
                            [ ".", "Duration", ".", ".", { "stat": "Average", "period": 604800 } ]
                        ],
                        "view": "singleValue",
                        "region": "${AWS::Region}",
                        "title": "Ingest Function Stats"
                    }
                },
                {
                    "type": "text",
                    "x": 12,
                    "y": 0,
                    "width": 3,
                    "height": 3,
                    "properties": {
                        "markdown": "# QuickLinks\n* [Kibana](https://${ProwlerESDomain.DomainEndpoint}/_plugin/kibana/)\n* [Lambda](https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${AWS::StackName}-import-findings?tab=monitoring)\n* [Cluster Health](https://console.aws.amazon.com/es/home?region=${AWS::Region}#domain:resource=${ProwlerESDomain};action=dashboard)\n* [SQS Queue](https://console.aws.amazon.com/sqs/home?region=${AWS::Region}#queue-browser:selected=${FindingIngestEventQueue};prefix=)\n* [Stack](https://console.aws.amazon.com/cloudformation/home?region=${AWS::Region}#/stack/detail?stackId=${AWS::StackId})"
                    }
                },
                {
                    "type": "metric",
                    "x": 15,
                    "y": 0,
                    "width": 3,
                    "height": 3,
                    "properties": {
                        "title": "QueueSizeAlarm",
                        "annotations": {
                            "alarms": [
                                "${FindingIngestEventQueueAlarm.Arn}"
                            ]
                        },
                        "view": "singleValue"
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 3,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "AWS/ES", "ElasticsearchRequests", "DomainName", "${ProwlerESDomain}", "ClientId", "${AWS::AccountId}", { "stat": "Maximum" } ],
                            [ ".", "IndexingRate", ".", ".", ".", ".", { "stat": "Maximum" } ],
                            [ ".", "SearchRate", ".", ".", ".", ".", { "stat": "Maximum" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Search Requests",
                        "period": 300
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 9,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "AWS/SQS", "NumberOfMessagesSent", "QueueName", "${FindingIngestEventQueue.QueueName}", { "stat": "Sum", "period": 300 } ],
                            [ ".", "ApproximateAgeOfOldestMessage", ".", ".", { "stat": "Average", "yAxis": "right", "period": 300 } ],
                            [ ".", "NumberOfMessagesDeleted", ".", ".", { "stat": "Sum" } ],
                            [ ".", "ApproximateNumberOfMessagesNotVisible", ".", ".", { "stat": "Sum" } ],
                            [ ".", "ApproximateNumberOfMessagesDelayed", ".", ".", { "stat": "Sum" } ],
                            [ ".", "NumberOfEmptyReceives", ".", ".", { "stat": "Sum" } ],
                            [ ".", "NumberOfMessagesReceived", ".", ".", { "stat": "Sum" } ],
                            [ ".", "ApproximateNumberOfMessagesVisible", ".", ".", { "stat": "Sum" } ],
                            [ ".", "SentMessageSize", ".", ".", { "stat": "Sum", "yAxis": "right", "visible": false, "period": 300 } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "yAxis": {
                            "left": {
                                "min": 0
                            },
                            "right": {
                                "min": 0
                            }
                        },
                        "title": "SQS Statistics"
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 15,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "AWS/Lambda", "Throttles", "FunctionName", "${AWS::StackName}-import-findings", { "stat": "Sum" } ],
                            [ ".", "Duration", ".", ".", { "stat": "Maximum", "yAxis": "right", "label": "Duration Max" } ],
                            [ ".", "Duration", ".", ".", { "stat": "Average", "yAxis": "right", "label": "Duration Avg" } ],
                            [ ".", "Invocations", ".", ".", { "stat": "Sum" } ],
                            [ ".", "Errors", ".", ".", { "stat": "Sum" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Ingest Lambda Statistics"
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 21,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "AWS/ES", "Nodes", "DomainName", "${ProwlerESDomain}", "ClientId", "${AWS::AccountId}", { "stat": "Maximum" } ],
                            [ ".", "KibanaHealthyNodes", ".", ".", ".", ".", { "stat": "Maximum" } ],
                            [ ".", "ClusterStatus.green", ".", ".", ".", ".", { "stat": "Maximum" } ],
                            [ ".", "ClusterStatus.red", ".", ".", ".", ".", { "stat": "Maximum" } ],
                            [ ".", "ClusterStatus.yellow", ".", ".", ".", ".", { "stat": "Maximum" } ],
                            [ ".", "MasterReachableFromNode", ".", ".", ".", ".", { "stat": "Maximum" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Node Stats",
                        "period": 300
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 27,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "AWS/ES", "ClusterUsedSpace", "DomainName", "${ProwlerESDomain}", "ClientId", "${AWS::AccountId}" ],
                            [ ".", "FreeStorageSpace", ".", ".", ".", "." ],
                            [ ".", "DeletedDocuments", ".", ".", ".", ".", { "yAxis": "right" } ],
                            [ ".", "SearchableDocuments", ".", ".", ".", ".", { "yAxis": "right" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "period": 300,
                        "yAxis": {
                          "left": {"min": 0 },
                          "right": {"min": 0 }
                        },
                        "title": "Cluster Disk Space and Documents"
                    }
                },
                {
                    "type": "text",
                    "x": 0,
                    "y": 30,
                    "width": 9,
                    "height": 6,
                    "properties": {
                        "markdown": "# Stack Info\n* StackName: ${AWS::StackName}\n* Cluster Size: ${pClusterInstanceType} x ${pClusterInstanceCount} Nodes / Encryption: ${pClusterEncryption}\n# Logs\n* [Lambda Logs](https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=/aws/lambda/${AWS::StackName}-import-findings;streamFilter=typeLogStreamPrefix)\n* [ES App Logs](https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=/aws/aes/domains/${ProwlerESDomain}/application-logs;streamFilter=typeLogStreamPrefix)\n* [ES Slow Index Logs](https://us-west-2.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=/aws/aes/domains/${ProwlerESDomain}/index-logs;streamFilter=typeLogStreamPrefix)\n"
                    }
                },
                {
                    "type": "log",
                    "x": 9,
                    "y": 30,
                    "width": 15,
                    "height": 6,
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AWS::StackName}-import-findings' | fields @timestamp, @message\n| parse @message \"Bulk ingest of * documents request took 0:00:0* sec and processing took * ms\" as doc_count, elapsed, took\n| parse @message \"[ERROR]\" as error\n| parse @message \"[WARNING]\" as warning\n| stats  avg(elapsed * 1000 ), avg(took), max(elapsed*1000), max(took), avg(elapsed*1000 - took), count(warning), count(error) by bin(5m)\n\n\n",
                        "region": "${AWS::Region}",
                        "title": "Log group: /aws/lambda/${AWS::StackName}-import-findings"
                    }
                }
            ]
        }


Outputs:
  TemplateURL:
    Description: URL to the Transformed Template this stack was deployed with (for promotion to another environment)
    Value: !Ref pTemplateURL

  ProwlerContainerTaskId:
    Condition: cDeployFargateContainer
    Value: !Ref ProwlerTaskDefinition

