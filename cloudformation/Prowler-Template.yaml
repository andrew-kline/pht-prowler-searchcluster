# Copyright 2023 - Chris Farris - All Rights Reserved
#

AWSTemplateFormatVersion: '2010-09-09'
Description: Run Prowler across the entire org, and index findings in Elastic Search
Transform: AWS::Serverless-2016-10-31


Parameters:

  pBucketName:
    Description: Name of the bucket to hold the prowler results
    Type: String

  pAuditRoleName:
    Description: Default name of the AssumeRole to assume into accounts
    Type: String
    Default: security-audit

  pPayerAccountId:
    Description: Account ID of the AWS Organizations Management Account
    Type: String

  pTemplateURL:
    Description: URL to the Transformed Template this stack was deployed with (for promotion to another environment)
    Type: String

  pScheduleExpression:
    Description: CloudWatch ScheduleExpression for when the task is run
    Type: String
    Default: cron(0 12 * * ? *)

  pRuleState:
    Type: String
    Description: Enable to disable the CloudWatch Event to run the ECS Task
    Default: DISABLED
    AllowedValues:
      - DISABLED
      - ENABLED

  pProwlerMetricNamespace:
    Type: String
    Description: Name of the CloudWatch Metrics Namespace to create Log metric filters
    Default: prowler

  pLogGroupName:
    Type: String
    Description: Name of LogGroup where Prowler Container will write logs
    Default: prowler

  #
  # Fargate Related Params
  #
  pServiceName:
    Type: String
    Default: "prowler"
    Description: A name for the service

  pContainerCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container. 1024 is 1 CPU

  pContainerMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the container

  pImageRepo:
    Type: String
    Description: The url of a docker image that contains the application process that will handle the traffic for this service

  pImageVersion:
    Description: Version Identifer of Container to Deploy
    Type: String

  pContainerSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet to use for the Fargate containers

  pContainerVPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to use for the Fargate containers

  #
  # ES
  #
  pDomainArn:
    Description: OpenSearch Domain ARN (for lambda perms)
    Type: String

  pDomainEndpoint:
    Description: Hostname of the Domain Endpoint
    Type: String


Globals:
  Function:
    Runtime: python3.9
    MemorySize: 2048

    Environment:
      Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          BUCKET: !Ref pBucketName
          ROLE_NAME: !Ref pAuditRoleName
          LOG_LEVEL: 'INFO'

Resources:

  #
  # Results Bucket
  #
  ProwlerBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    DependsOn: ProwlerBucketNotificationTopicPolicy
    Properties:
      # AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref pBucketName
      # Additional Configuration options to come back and revisit.
      # LifecycleConfiguration: <- I don't think we'd ever want to expire resources, but maybe over time?
      # LoggingConfiguration: <- Probably unnecessary, but if someone needs it for compliance
      NotificationConfiguration:
        TopicConfigurations:
          - Event: 's3:ObjectCreated:*'
            Topic: !Ref OutputNotificationTopic
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: "prowler-output/json/"
                  - Name: suffix
                    Value: ".json"
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True  # This rule also prohibits Cross-Account bucket access

  OutputNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Destination of PutObject calls from ${pBucketName}"
      TopicName: !Sub "${pBucketName}-Resources-PutObject"

  ProwlerBucketNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref OutputNotificationTopic
      PolicyDocument:
        Version: '2012-10-17'
        Id: AllowProwlerBucket
        Statement:
        - Sid: AllowProwlerBucketPublish
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Publish
          Resource:
          - !Ref OutputNotificationTopic
          Condition:
            ArnLike:
              aws:SourceArn: !Sub "arn:aws:s3:*:*:${pBucketName}"
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId

  #
  # ECS Resources
  #
  ECSCluster:
    Type: AWS::ECS::Cluster

  ProwlerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'pServiceName'
      Cpu: !Ref 'pContainerCpu'
      Memory: !Ref 'pContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ContainerRole
      RuntimePlatform:
          CpuArchitecture: ARM64
          OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: !Ref 'pServiceName'
          Cpu: !Ref 'pContainerCpu'
          Memory: !Ref 'pContainerMemory'
          Image: !Sub "${pImageRepo}:${pImageVersion}"
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref pLogGroupName
                awslogs-region: !Ref AWS::Region
                awslogs-create-group: true
                awslogs-stream-prefix: !Sub "${pServiceName}-${pImageVersion}"
          Environment:
            - Name: ROLENAME
              Value: !Ref pAuditRoleName
            - Name: PAYER_ID
              Value: !Ref pPayerAccountId
            - Name: OUTPUT_BUCKET
              Value: !Ref pBucketName

  ContainerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs.amazonaws.com
              - ecs-tasks.amazonaws.com
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
              # Allow the ECS tasks to upload logs to CloudWatch
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
            Resource: '*'
      - PolicyName: ProwlerPermissions
        PolicyDocument:
          Statement:
          - Sid: WriteResultsToS3
            Action: s3:*
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${pBucketName}/*'
              - !Sub 'arn:aws:s3:::${pBucketName}'
          - Sid: AssumeAuditRole
            Effect: "Allow"
            Action:
            - sts:AssumeRole
            Resource: !Sub "arn:aws:iam::*:role/${pAuditRoleName}"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:CreateLogGroup'
                - 'logs:PutLogEvents'
              Resource: '*'

  ECSEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "Container Security Group for ${AWS::StackName}"
      # GroupName: String
      VpcId: !Ref pContainerVPCId

  #
  # Run the Task
  #
  RunTaskRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Execute the Prowler container task
      Name: !Sub ${AWS::StackName}-run-prowler-task
      # RoleArn: String
      ScheduleExpression: !Ref pScheduleExpression
      State: !Ref pRuleState
      Targets:
        - Arn: !GetAtt ECSCluster.Arn
          RoleArn: !GetAtt ECSEventRole.Arn
          Id: Id345
          EcsParameters:
            TaskDefinitionArn: !Ref ProwlerTaskDefinition
            TaskCount: 1
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                Subnets:
                - !Ref pContainerSubnet
                SecurityGroups:
                - !Ref ContainerSecurityGroup
                AssignPublicIp: ENABLED
            PlatformVersion: LATEST
            EnableECSManagedTags: false
            EnableExecuteCommand: false


  #
  # Lambda Functions
  #
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${pBucketName}/*'
              - !Sub 'arn:aws:s3:::${pBucketName}'
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: AssumeCrossAccountRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - sts:AssumeRole
            Resource: !Sub "arn:aws:iam::*:role/${pAuditRoleName}"
      - PolicyName: GetMessages
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource:
            - !GetAtt S3EventQueue.Arn
            - !GetAtt FindingIngestEventQueue.Arn
            Action:
            - sqs:*
            Effect: Allow
      - PolicyName: IndexData
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: !Sub "${pDomainArn}/*"
            Action:
            - es:*
            Effect: Allow

  ImportProwlerFindingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-import-findings"
      Description: Import Prowler Findings into ElasticSearch
      Handler: import_prowler_findings.handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../lambda
      Timeout: 60
      # TODO - Set Concurrency here
      Events:
        SQSIngest:
          Type: SQS
          Properties:
            BatchSize: 100
            MaximumBatchingWindowInSeconds: 60
            Enabled: True
            Queue: !GetAtt FindingIngestEventQueue.Arn
      Environment:
        Variables:
          ES_DOMAIN_ENDPOINT: !Ref pDomainEndpoint

  ProcessFindingsFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-process-finding-file"
      Description: Process the Prowler file pushed to S3
      Handler: process_prowler_file.handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../lambda
      Timeout: 600
      Events:
        SQSIngest:
          Type: SQS
          Properties:
            BatchSize: 1
            Enabled: True
            Queue: !GetAtt S3EventQueue.Arn
      Environment:
        Variables:
          FINDING_QUEUE_URL: !Ref FindingIngestEventQueue

  #
  # S3 -> SNS -> SQS -> Lambda Plumbing
  #
  S3EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      # Any messages older than an hour are probably out-of-date
      MessageRetentionPeriod: 36000
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 300

  S3EventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref S3EventQueue
      PolicyDocument:
        Version: '2012-10-17'
        Id: AllowS3
        Statement:
        - Sid: AllowS3EventNotification
          Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - SQS:SendMessage
          Resource: !GetAtt S3EventQueue.Arn
          Condition:
            ArnLike:
              aws:SourceArn: !Sub "arn:aws:s3:*:*:${pBucketName}"
        - Sid: Allow-SNS-SendMessage
          Effect: Allow
          Principal: "*"
          Action:
          - sqs:SendMessage
          Resource: !GetAtt S3EventQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref OutputNotificationTopic

  S3EventQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt S3EventQueue.Arn
      Protocol: sqs
      TopicArn: !Ref OutputNotificationTopic

  S3EventQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      # AlarmActions:
      #   - String
      AlarmDescription: "Alert when Queue doesn't properly drain"
      AlarmName: !Sub "${AWS::StackName}-FileProcessQueue"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt S3EventQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      # OKActions:
      #   - String
      Period: 300
      Statistic: Average
      Threshold: 3
      TreatMissingData: missing


  #
  # Finding Queue
  #
  FindingIngestEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      # Any messages older than an hour are probably out-of-date
      MessageRetentionPeriod: 36000
      ReceiveMessageWaitTimeSeconds: 10
      VisibilityTimeout: 300

  FindingIngestEventQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      # AlarmActions:
      #   - String
      AlarmDescription: "Alert when Queue doesn't properly drain"
      AlarmName: !Sub "${AWS::StackName}-FindingIngestQueue"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt FindingIngestEventQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      # OKActions:
      #   - String
      Period: 300
      Statistic: Average
      Threshold: 8000
      TreatMissingData: missing

  #
  # Alarms
  #
  ImportProwlerFindingsFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ImportProwlerFindingsFunction}-LambdaErrors
      AlarmDescription: "Alarm if lambda errors out"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref ImportProwlerFindingsFunction
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 1
      Period: 60
      TreatMissingData: "ignore"
      # AlarmActions:
      #   - !Ref SlackSNSTopic

  ProcessFindingsFileFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ProcessFindingsFileFunction}-LambdaErrors
      AlarmDescription: "Alarm if lambda errors out"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref ProcessFindingsFileFunction
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 1
      Period: 60
      TreatMissingData: "ignore"
      # AlarmActions:
      #   - !Ref SlackSNSTopic

  # ProwlerDurationMetricFilter:
  #   Type: AWS::Logs::MetricFilter
  #   Properties:
  #     LogGroupName: !Ref pLogGroupName
  #     FilterPattern: '[timestamp, logLevel, message = "Prowler Exited for", accountId = Number, "with error code", errorCode = Number, "after", durationSeconds = Number, "seconds"]'
  #     MetricTransformations:
  #       - MetricValue: "durationSeconds"
  #         MetricNamespace: !Ref pProwlerMetricNamespace
  #         MetricName: "ProwlerDuration"


  SuccessfulProwlerRunMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref pLogGroupName
      FilterPattern: '"Prowler Exited" "with error code 0"'
      MetricTransformations:
      - MetricNamespace: !Ref pProwlerMetricNamespace
        MetricName: successful_prowler_runs
        MetricValue: '1'

  FailedProwlerRunMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref pLogGroupName
      FilterPattern: '"Prowler Exited" -"with error code 0"'
      MetricTransformations:
      - MetricNamespace: !Ref pProwlerMetricNamespace
        MetricName: failed_prowler_runs
        MetricValue: '1'

  FailedProwlerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: FailedProwlerRun
      AlarmDescription: Alarms Prowler exits non-0 for an account.
      # AlarmActions:
      MetricName: failed_prowler_runs
      Namespace: !Ref pProwlerMetricNamespace
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching

Outputs:
  TemplateURL:
    Description: URL to the Transformed Template this stack was deployed with (for promotion to another environment)
    Value: !Ref pTemplateURL

  ProwlerContainerTaskId:
    Value: !Ref ProwlerTaskDefinition

